// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: genres.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GenderService_CreateGender_FullMethodName  = "/protos.GenderService/CreateGender"
	GenderService_UpdateGender_FullMethodName  = "/protos.GenderService/UpdateGender"
	GenderService_DeleteGender_FullMethodName  = "/protos.GenderService/DeleteGender"
	GenderService_GetByIdGender_FullMethodName = "/protos.GenderService/GetByIdGender"
	GenderService_GetAllGenders_FullMethodName = "/protos.GenderService/GetAllGenders"
)

// GenderServiceClient is the client API for GenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenderServiceClient interface {
	CreateGender(ctx context.Context, in *Gender, opts ...grpc.CallOption) (*Void, error)
	UpdateGender(ctx context.Context, in *Gender, opts ...grpc.CallOption) (*Void, error)
	DeleteGender(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetByIdGender(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Gender, error)
	GetAllGenders(ctx context.Context, in *Gender, opts ...grpc.CallOption) (*AllGenders, error)
}

type genderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenderServiceClient(cc grpc.ClientConnInterface) GenderServiceClient {
	return &genderServiceClient{cc}
}

func (c *genderServiceClient) CreateGender(ctx context.Context, in *Gender, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, GenderService_CreateGender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genderServiceClient) UpdateGender(ctx context.Context, in *Gender, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, GenderService_UpdateGender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genderServiceClient) DeleteGender(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, GenderService_DeleteGender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genderServiceClient) GetByIdGender(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Gender, error) {
	out := new(Gender)
	err := c.cc.Invoke(ctx, GenderService_GetByIdGender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genderServiceClient) GetAllGenders(ctx context.Context, in *Gender, opts ...grpc.CallOption) (*AllGenders, error) {
	out := new(AllGenders)
	err := c.cc.Invoke(ctx, GenderService_GetAllGenders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenderServiceServer is the server API for GenderService service.
// All implementations must embed UnimplementedGenderServiceServer
// for forward compatibility
type GenderServiceServer interface {
	CreateGender(context.Context, *Gender) (*Void, error)
	UpdateGender(context.Context, *Gender) (*Void, error)
	DeleteGender(context.Context, *ById) (*Void, error)
	GetByIdGender(context.Context, *ById) (*Gender, error)
	GetAllGenders(context.Context, *Gender) (*AllGenders, error)
	mustEmbedUnimplementedGenderServiceServer()
}

// UnimplementedGenderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGenderServiceServer struct {
}

func (UnimplementedGenderServiceServer) CreateGender(context.Context, *Gender) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGender not implemented")
}
func (UnimplementedGenderServiceServer) UpdateGender(context.Context, *Gender) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGender not implemented")
}
func (UnimplementedGenderServiceServer) DeleteGender(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGender not implemented")
}
func (UnimplementedGenderServiceServer) GetByIdGender(context.Context, *ById) (*Gender, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdGender not implemented")
}
func (UnimplementedGenderServiceServer) GetAllGenders(context.Context, *Gender) (*AllGenders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGenders not implemented")
}
func (UnimplementedGenderServiceServer) mustEmbedUnimplementedGenderServiceServer() {}

// UnsafeGenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenderServiceServer will
// result in compilation errors.
type UnsafeGenderServiceServer interface {
	mustEmbedUnimplementedGenderServiceServer()
}

func RegisterGenderServiceServer(s grpc.ServiceRegistrar, srv GenderServiceServer) {
	s.RegisterService(&GenderService_ServiceDesc, srv)
}

func _GenderService_CreateGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Gender)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenderServiceServer).CreateGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenderService_CreateGender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenderServiceServer).CreateGender(ctx, req.(*Gender))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenderService_UpdateGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Gender)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenderServiceServer).UpdateGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenderService_UpdateGender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenderServiceServer).UpdateGender(ctx, req.(*Gender))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenderService_DeleteGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenderServiceServer).DeleteGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenderService_DeleteGender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenderServiceServer).DeleteGender(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenderService_GetByIdGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenderServiceServer).GetByIdGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenderService_GetByIdGender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenderServiceServer).GetByIdGender(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenderService_GetAllGenders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Gender)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenderServiceServer).GetAllGenders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenderService_GetAllGenders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenderServiceServer).GetAllGenders(ctx, req.(*Gender))
	}
	return interceptor(ctx, in, info, handler)
}

// GenderService_ServiceDesc is the grpc.ServiceDesc for GenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GenderService",
	HandlerType: (*GenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGender",
			Handler:    _GenderService_CreateGender_Handler,
		},
		{
			MethodName: "UpdateGender",
			Handler:    _GenderService_UpdateGender_Handler,
		},
		{
			MethodName: "DeleteGender",
			Handler:    _GenderService_DeleteGender_Handler,
		},
		{
			MethodName: "GetByIdGender",
			Handler:    _GenderService_GetByIdGender_Handler,
		},
		{
			MethodName: "GetAllGenders",
			Handler:    _GenderService_GetAllGenders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "genres.proto",
}
